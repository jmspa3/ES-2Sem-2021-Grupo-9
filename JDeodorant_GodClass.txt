G9.CodeQualityAssessor.ContentExcel	[G9.CodeQualityAssessor.ContentExcel::int tableWidth, G9.CodeQualityAssessor.ContentExcel::int tableHeight, G9.CodeQualityAssessor.ContentExcel::setExcelWidthAndHeight(java.lang.String):void, G9.CodeQualityAssessor.ContentExcel::int ruleNumber, G9.CodeQualityAssessor.ContentExcel::java.util.ArrayList<java.lang.String> ruleNameList, G9.CodeQualityAssessor.ContentExcel::writeExcel(java.lang.String):void, G9.CodeQualityAssessor.ContentExcel::createHeaderRow(org.apache.poi.ss.usermodel.Sheet):void, G9.CodeQualityAssessor.ContentExcel::writeBook(metrics.Metric, org.apache.poi.ss.usermodel.Row, G9.CodeQualityAssessor.CodeSmells):void, G9.CodeQualityAssessor.ContentExcel::getListBook(java.lang.String):java.util.List<metrics.Metric>]
G9.CodeQualityAssessor.ContentExcel	[G9.CodeQualityAssessor.ContentExcel::java.util.HashSet<java.lang.String> listPackages, G9.CodeQualityAssessor.ContentExcel::numberTotalPackages():int, G9.CodeQualityAssessor.ContentExcel::java.util.Vector<org.apache.poi.ss.usermodel.Cell> data, G9.CodeQualityAssessor.ContentExcel::setData(java.lang.String):void, G9.CodeQualityAssessor.ContentExcel::int numMethods, G9.CodeQualityAssessor.ContentExcel::java.util.HashSet<java.lang.String> listClasses, G9.CodeQualityAssessor.ContentExcel::numberTotalClasses():int, G9.CodeQualityAssessor.ContentExcel::java.util.HashMap<java.lang.String,java.lang.Integer> totalLines, G9.CodeQualityAssessor.ContentExcel::numberTotalLines():int]
G9.CodeQualityAssessor.ContentExcel	[G9.CodeQualityAssessor.ContentExcel::java.util.HashSet<java.lang.String> listPackages, G9.CodeQualityAssessor.ContentExcel::numberTotalPackages():int, G9.CodeQualityAssessor.ContentExcel::java.util.Vector<org.apache.poi.ss.usermodel.Cell> data, G9.CodeQualityAssessor.ContentExcel::setData(java.lang.String):void, G9.CodeQualityAssessor.ContentExcel::int numMethods, G9.CodeQualityAssessor.ContentExcel::java.util.HashSet<java.lang.String> listClasses, G9.CodeQualityAssessor.ContentExcel::numberTotalClasses():int]
G9.CodeQualityAssessor.ContentExcel	[G9.CodeQualityAssessor.ContentExcel::int tableWidth, G9.CodeQualityAssessor.ContentExcel::int tableHeight, G9.CodeQualityAssessor.ContentExcel::setExcelWidthAndHeight(java.lang.String):void]
G9.CodeQualityAssessor.ContentExcel	[G9.CodeQualityAssessor.ContentExcel::java.util.HashSet<java.lang.String> listPackages, G9.CodeQualityAssessor.ContentExcel::numberTotalPackages():int, G9.CodeQualityAssessor.ContentExcel::java.util.Vector<org.apache.poi.ss.usermodel.Cell> data, G9.CodeQualityAssessor.ContentExcel::setData(java.lang.String):void, G9.CodeQualityAssessor.ContentExcel::int numMethods]
G9.CodeQualityAssessor.ColorRenderer	[G9.CodeQualityAssessor.ColorRenderer::int god_col, G9.CodeQualityAssessor.ColorRenderer::int long_col, G9.CodeQualityAssessor.ColorRenderer::setColumns(int, int):void]
metrics.MetricUtils	[metrics.MetricUtils::getMethodName(java.lang.Object):java.lang.String, metrics.MetricUtils::getMethod_Name_Aux(java.lang.Object):java.lang.String[], metrics.MetricUtils::getConstructor_Name_Aux(java.lang.Object):java.lang.String[]]
metrics.MetricUtils	[metrics.MetricUtils::getLOC_Method(java.lang.Object):int, metrics.MetricUtils::getLOC_Method_End_Line(java.lang.Object):int, metrics.MetricUtils::getLOC_Method_Begin_Line(java.lang.Object):int]
Limits.Threshold	[Limits.Threshold::java.lang.String[] argument_operator, Limits.Threshold::editConditionalOp(java.lang.String):void, Limits.Threshold::editOperators(java.lang.String, java.lang.String):void, Limits.Threshold::editArgs(java.lang.String, java.lang.String):void, Limits.Threshold::editOperator(java.lang.String, int):void, Limits.Threshold::getArgument(int):java.lang.String, Limits.Threshold::insertCondition(java.lang.String):void, Limits.Threshold::getCondition(boolean):java.lang.String]
Limits.Threshold	[Limits.Threshold::int[] editable_numbers, Limits.Threshold::getNumber(int):int, Limits.Threshold::editNumber(int, int):void, Limits.Threshold::editNumbers(int, int):void]
